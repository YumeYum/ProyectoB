@model WebApplication9.Models.contactos

@{
    Layout = "~/Views/Proyectob/Shared/_Layout.cshtml";

}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title> </title>
       
    <style>
        .control-label {
            font-weight: bold;
        }

    </style>

</head>
<body>
    @if (ViewBag.TheResult == true)
    {
        <div class="alert alert-success">
            <strong>Registro guardado con éxito.</strong>
        </div>
    }
    <div class="col">

        @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Crear Contacto</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    <div class="row col-md-6">
                        <div class="col">
                            @Html.LabelFor(model => model.rut, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => model.rut, new { htmlAttributes = new { @class = "form-control", required = "required", onchange = "checkRut(this)" } })
                            @Html.ValidationMessageFor(model => model.rut, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row col-md-6">

                        <div class="col">
                            @Html.LabelFor(model => model.nombres, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => model.nombres, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                            @Html.ValidationMessageFor(model => model.nombres, "", new { @class = "text-danger" })
                        </div>

                        <div class="col">
                            @Html.LabelFor(model => model.apellidos, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => model.apellidos, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                            @Html.ValidationMessageFor(model => model.apellidos, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>


                <div class="form-group">
                    <div class="row col-md-6">

                        <div class="col">
                            @Html.LabelFor(model => model.tcel, htmlAttributes: new { @class = "control-label col-md-5" })
                            @Html.EditorFor(model => model.tcel, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                            @Html.ValidationMessageFor(model => model.tcel, "", new { @class = "text-danger" })
                        </div>

                        <div class="col">
                            @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                            @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>


                <div class="form-group">
                    <div class="row col-md-6">

                        <div class="col">
                            @Html.LabelFor(model => model.comentario, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => model.comentario, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                            @Html.ValidationMessageFor(model => model.comentario, "", new { @class = "text-danger" })
                        </div>

                        <div class="col">
                            @Html.LabelFor(model => model.curriculum, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div><input type="file" name="file" id="file" /></div>
                            <br><br>
                            @ViewBag.Message
                            
                            @Html.ValidationMessageFor(model => model.curriculum, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>




                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Crear" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        }
        @ViewBag.Message
        
      @section scripts {
          <script>
              function checkRut(rut) {
    // Despejar Puntos
    var valor = rut.value.replace('.','');
    // Despejar Guión
    valor = valor.replace('-','');

    // Aislar Cuerpo y Dígito Verificador
    cuerpo = valor.slice(0,-1);
    dv = valor.slice(-1).toUpperCase();

    // Formatear RUN
    rut.value = cuerpo + '-'+ dv

    // Si no cumple con el mínimo ej. (n.nnn.nnn)
    if(cuerpo.length < 7) { rut.setCustomValidity("RUT Incompleto"); return false;}

    // Calcular Dígito Verificador
    suma = 0;
    multiplo = 2;

    // Para cada dígito del Cuerpo
    for(i=1;i<=cuerpo.length;i++) {

        // Obtener su Producto con el Múltiplo Correspondiente
        index = multiplo * valor.charAt(cuerpo.length - i);

        // Sumar al Contador General
        suma = suma + index;

        // Consolidar Múltiplo dentro del rango [2,7]
        if(multiplo < 7) { multiplo = multiplo + 1; } else { multiplo = 2; }

    }

    // Calcular Dígito Verificador en base al Módulo 11
    dvEsperado = 11 - (suma % 11);

    // Casos Especiales (0 y K)
    dv = (dv == 'K')?10:dv;
    dv = (dv == 0)?11:dv;

    // Validar que el Cuerpo coincide con su Dígito Verificador
    if(dvEsperado != dv) { rut.setCustomValidity("RUT Inválido"); return false; }

    // Si todo sale bien, eliminar errores (decretar que es válido)
    rut.setCustomValidity('');
}

          </script>
       
        }
            
            
            
        <div>
            @Html.ActionLink("Volver al índice", "/Index_Contacto")
        </div>
    </div>

</body>
</html>
