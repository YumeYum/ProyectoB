@model WebApplication9.Models.usuario

@{
    Layout = "~/Views/Proyectob/Shared/_Layout.cshtml";

}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title> Crear Usuario</title>
    <style>
        .custom-combobox {
            position: relative;
            display: inline-block;
        }

        .custom-combobox-toggle {
            position: absolute;
            top: 0;
            bottom: 0;
            margin-left: -1px;
            padding: 0;
        }

        .custom-combobox-input {
            margin: 0;
            padding: 5px 10px;
        }
    </style>
</head>
<body>
    @if (ViewBag.TheResult == true)
    {
        <div class="alert alert-success">
            <strong>Registro guardado con éxito.</strong>
        </div>
    }
    <div class="col">
    @using (Html.BeginForm()) 
    {
        @Html.AntiForgeryToken()
        
        <div class="form-horizontal">
            <h4>Crear Usuario</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="ui-widget">
            <div class="form-group">
                <b>@Html.LabelFor(model => model.id_contacto, htmlAttributes: new { @class = "control-label col-md-2" })</b>
                <div class="row col-md-6">
                    <div class="col">
                        @Html.DropDownListFor(model => model.id_contacto, new SelectList(Model.contactoList, "id", "FullName"), "Seleccione Contacto", new { required = "required" })
                        @Html.ValidationMessageFor(model => model.id_contacto, "", new { @class = "text-danger" })
                    </div>

                </div>
            </div>
                </div>
            <div class="form-group">
                <div>
                    <b>@Html.Label("Estado Inicial", htmlAttributes: new { @class = "control-label col-md-2" })</b>
                </div>
                <div class="row col-md-6">
                    <div class="col">
                        @Html.DropDownList("EstadoL", new SelectList(ViewBag.EstadoL, "Value", "Text"))
                        <input type="hidden" name="EstadoL" value="@ViewBag.EstadoL" />
                    </div>
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-3">
                    <b>@Html.Label("Roles")</b><br />
                    @for (int i = 0; i < Model.rolesList.Count; i++)
                    {
                        @Html.HiddenFor(m => m.rolesList[i].id)
                        <div class="col-md-12">
                            @Html.CheckBoxFor(m => m.rolesList[i].IsSelected)
                            @Html.LabelFor(m => m.rolesList[i].IsSelected, Model.rolesList[i].rol)
                        </div>


                    }
                </div>
            </div>



    
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Crear" class="btn btn-primary" />
                </div>
            </div>
        </div>
    }

        @section scripts{
            
    <script type="text/javascript">
    $(document).ready(function () {
        $('.Datepicker').datepicker({
            dateFormat: "dd-mm-yy",
            showStatus: true,
            showWeeks: true,
            currentText: 'Now',
            autoSize: true,
            gotoCurrent: true,
            showAnim: 'blind',
            highlightWeek: true
        });
        });
        $(function () {
            $.widget("custom.combobox", {
                _create: function () {
                    this.wrapper = $("<span>")
                        .addClass("custom-combobox")
                        .insertAfter(this.element);

                    this.element.hide();
                    this._createAutocomplete();
                    this._createShowAllButton();
                },

                _createAutocomplete: function () {
                    var selected = this.element.children(":selected"),
                        value = selected.val() ? selected.text() : "";

                    this.input = $("<input>")
                        .appendTo(this.wrapper)
                        .val(value)
                        .attr("title", "")
                        .addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                        .autocomplete({
                            delay: 0,
                            minLength: 0,
                            source: $.proxy(this, "_source")
                        })
                        .tooltip({
                            classes: {
                                "ui-tooltip": "ui-state-highlight"
                            }
                        });

                    this._on(this.input, {
                        autocompleteselect: function (event, ui) {
                            ui.item.option.selected = true;
                            this._trigger("select", event, {
                                item: ui.item.option
                            });
                        },

                        autocompletechange: "_removeIfInvalid"
                    });
                },

                _createShowAllButton: function () {
                    var input = this.input,
                        wasOpen = false;

                    $("<a>")
                        .attr("tabIndex", -1)
                        .attr("title", "Mostrar Todos")
                        .tooltip()
                        .appendTo(this.wrapper)
                        .button({
                            icons: {
                                primary: "ui-icon-triangle-1-s"
                            },
                            text: false
                        })
                        .removeClass("ui-corner-all")
                        .addClass("custom-combobox-toggle ui-corner-right")
                        .on("mousedown", function () {
                            wasOpen = input.autocomplete("widget").is(":visible");
                        })
                        .on("click", function () {
                            input.trigger("focus");

                            // Close if already visible
                            if (wasOpen) {
                                return;
                            }

                            // Pass empty string as value to search for, displaying all results
                            input.autocomplete("search", "");
                        });
                },

                _source: function (request, response) {
                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                    response(this.element.children("option").map(function () {
                        var text = $(this).text();
                        if (this.value && (!request.term || matcher.test(text)))
                            return {
                                label: text,
                                value: text,
                                option: this
                            };
                    }));
                },

                _removeIfInvalid: function (event, ui) {

                    // Selected an item, nothing to do
                    if (ui.item) {
                        return;
                    }

                    // Search for a match (case-insensitive)
                    var value = this.input.val(),
                        valueLowerCase = value.toLowerCase(),
                        valid = false;
                    this.element.children("option").each(function () {
                        if ($(this).text().toLowerCase() === valueLowerCase) {
                            this.selected = valid = true;
                            return false;
                        }
                    });

                    // Found a match, nothing to do
                    if (valid) {
                        return;
                    }

                    // Remove invalid value
                    this.input
                        .val("")
                        .attr("title", value + " no se encontró ningun registro")
                        .tooltip("open");
                    this.element.val("");
                    this._delay(function () {
                        this.input.tooltip("close").attr("title", "");
                    }, 2500);
                    this.input.autocomplete("instance").term = "";
                },

                _destroy: function () {
                    this.wrapper.remove();
                    this.element.show();
                }
            });

            $("#id_contacto").combobox();
            $("#toggle").on("click", function () {
                $("#id_contacto").toggle();

            });

        });

    </script>    
        }
    <div class="col">
        @Html.ActionLink("Volver al Index", "/Index_Usuarios")
    </div>
        </div>
</body>
</html>
